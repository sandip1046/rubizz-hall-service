{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  database: 'MongoDB',
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-10-09 11:26:59.756'
}
{
  message: 'Database connected successfully',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-09 11:26:59.767'
}
{
  message: 'Redis Session client connected',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-09 11:26:59.976'
}
{
  message: 'Redis Cache client connected',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-09 11:26:59.988'
}
{
  message: 'Redis Queue client connected',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-09 11:26:59.999'
}
{
  message: 'Redis Session client ready',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-09 11:27:00.374'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  command: { name: 'select', args: [ '2' ] },
  level: 'error',
  message: 'Redis Queue client error: ERR Only 0th database is supported! Selected DB: 2',
  stack: 'ReplyError: ERR Only 0th database is supported! Selected DB: 2\n' +
    '    at parseError (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\node_modules\\redis-parser\\lib\\parser.js:179:12)\n' +
    '    at parseType (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\node_modules\\redis-parser\\lib\\parser.js:302:14)',
  timestamp: '2025-10-09 11:27:00.394'
}
{
  message: 'Redis Queue client ready',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-09 11:27:00.407'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  command: { name: 'select', args: [ '1' ] },
  level: 'error',
  message: 'Redis Cache client error: ERR Only 0th database is supported! Selected DB: 1',
  stack: 'ReplyError: ERR Only 0th database is supported! Selected DB: 1\n' +
    '    at parseError (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\node_modules\\redis-parser\\lib\\parser.js:179:12)\n' +
    '    at parseType (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\node_modules\\redis-parser\\lib\\parser.js:302:14)',
  timestamp: '2025-10-09 11:27:00.410'
}
{
  message: 'Redis Cache client ready',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-09 11:27:00.415'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  session: { host: 'crack-kingfish-11262.upstash.io', port: 6379 },
  cache: { host: 'touching-lobster-11264.upstash.io', port: 6379 },
  queue: { host: 'cool-teal-11267.upstash.io', port: 6379 },
  level: 'info',
  message: 'All Redis clients connected successfully',
  timestamp: '2025-10-09 11:27:00.418'
}
{
  message: 'Redis connected successfully',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-09 11:27:00.420'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  port: 3007,
  environment: 'development',
  level: 'info',
  message: 'Hall Management Service started',
  timestamp: '2025-10-09 11:27:00.435'
}
{
  message: 'Received SIGINT, starting graceful shutdown...',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-09 11:27:10.504'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  database: 'MongoDB (Mongoose)',
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-10-30 09:51:58.505'
}
{
  message: 'Database connected successfully',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-30 09:51:58.507'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  code: 'ECONNREFUSED',
  errors: [
    Error: connect ECONNREFUSED ::1:3000
        at createConnectionError (node:net:1678:14)
        at afterConnectMultiple (node:net:1708:16) {
      errno: -4078,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '::1',
      port: 3000
    },
    Error: connect ECONNREFUSED 127.0.0.1:3000
        at createConnectionError (node:net:1678:14)
        at afterConnectMultiple (node:net:1708:16) {
      errno: -4078,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 3000
    }
  ],
  message: 'Redis service health check failed: Error',
  name: 'AggregateError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      'User-Agent': 'axios/1.12.2',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    method: 'get',
    url: 'http://localhost:3000/api/v1/redis/health',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *2> Writable {
    _events: {
      close: undefined,
      error: [Function: handleRequestError],
      prefinish: undefined,
      finish: undefined,
      drain: undefined,
      response: [Function: handleResponse],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ],
      timeout: undefined,
      abort: undefined
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      Symbol(kState): 17580812,
      Symbol(kBufferedValue): null
    },
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: Infinity,
      protocol: 'http:',
      path: '/api/v1/redis/health',
      method: 'GET',
      headers: [Object: null prototype] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'User-Agent': 'axios/1.12.2',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      agents: { http: undefined, https: undefined },
      auth: undefined,
      family: undefined,
      beforeRedirect: [Function: dispatchBeforeRedirect],
      beforeRedirects: { proxy: [Function: beforeRedirect] },
      hostname: 'localhost',
      port: '3000',
      agent: undefined,
      nativeProtocols: {
        'http:': {
          _connectionListener: [Function: connectionListener],
          METHODS: [
            'ACL',        'BIND',        'CHECKOUT',
            'CONNECT',    'COPY',        'DELETE',
            'GET',        'HEAD',        'LINK',
            'LOCK',       'M-SEARCH',    'MERGE',
            'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
            'MOVE',       'NOTIFY',      'OPTIONS',
            'PATCH',      'POST',        'PROPFIND',
            'PROPPATCH',  'PURGE',       'PUT',
            'QUERY',      'REBIND',      'REPORT',
            'SEARCH',     'SOURCE',      'SUBSCRIBE',
            'TRACE',      'UNBIND',      'UNLINK',
            'UNLOCK',     'UNSUBSCRIBE'
          ],
          STATUS_CODES: {
            '100': 'Continue',
            '101': 'Switching Protocols',
            '102': 'Processing',
            '103': 'Early Hints',
            '200': 'OK',
            '201': 'Created',
            '202': 'Accepted',
            '203': 'Non-Authoritative Information',
            '204': 'No Content',
            '205': 'Reset Content',
            '206': 'Partial Content',
            '207': 'Multi-Status',
            '208': 'Already Reported',
            '226': 'IM Used',
            '300': 'Multiple Choices',
            '301': 'Moved Permanently',
            '302': 'Found',
            '303': 'See Other',
            '304': 'Not Modified',
            '305': 'Use Proxy',
            '307': 'Temporary Redirect',
            '308': 'Permanent Redirect',
            '400': 'Bad Request',
            '401': 'Unauthorized',
            '402': 'Payment Required',
            '403': 'Forbidden',
            '404': 'Not Found',
            '405': 'Method Not Allowed',
            '406': 'Not Acceptable',
            '407': 'Proxy Authentication Required',
            '408': 'Request Timeout',
            '409': 'Conflict',
            '410': 'Gone',
            '411': 'Length Required',
            '412': 'Precondition Failed',
            '413': 'Payload Too Large',
            '414': 'URI Too Long',
            '415': 'Unsupported Media Type',
            '416': 'Range Not Satisfiable',
            '417': 'Expectation Failed',
            '418': "I'm a Teapot",
            '421': 'Misdirected Request',
            '422': 'Unprocessable Entity',
            '423': 'Locked',
            '424': 'Failed Dependency',
            '425': 'Too Early',
            '426': 'Upgrade Required',
            '428': 'Precondition Required',
            '429': 'Too Many Requests',
            '431': 'Request Header Fields Too Large',
            '451': 'Unavailable For Legal Reasons',
            '500': 'Internal Server Error',
            '501': 'Not Implemented',
            '502': 'Bad Gateway',
            '503': 'Service Unavailable',
            '504': 'Gateway Timeout',
            '505': 'HTTP Version Not Supported',
            '506': 'Variant Also Negotiates',
            '507': 'Insufficient Storage',
            '508': 'Loop Detected',
            '509': 'Bandwidth Limit Exceeded',
            '510': 'Not Extended',
            '511': 'Network Authentication Required'
          },
          Agent: [Function: Agent] { defaultMaxSockets: Infinity },
          ClientRequest: [Function: ClientRequest],
          IncomingMessage: [Function: IncomingMessage],
          OutgoingMessage: [Function: OutgoingMessage],
          Server: [Function: Server],
          ServerResponse: [Function: ServerResponse],
          createServer: [Function: createServer],
          validateHeaderName: [Function: validateHeaderName] {
            withoutStackTrace: [Function (anonymous)]
          },
          validateHeaderValue: [Function: validateHeaderValue] {
            withoutStackTrace: [Function (anonymous)]
          },
          get: [Function: get],
          request: [Function: request],
          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
          maxHeaderSize: [Getter],
          globalAgent: [Getter/Setter],
          WebSocket: [Getter],
          CloseEvent: [Getter],
          MessageEvent: [Getter]
        },
        'https:': {
          Agent: [Function: Agent],
          globalAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: true,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            Symbol(shapeMode): false,
            Symbol(kCapture): false
          },
          Server: [Function: Server],
          createServer: [Function: createServer],
          get: [Function: get],
          request: [Function: request]
        }
      },
      pathname: '/api/v1/redis/health'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _eventsCount: 3,
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        response: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        },
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      _header: 'GET /api/v1/redis/health HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'User-Agent: axios/1.12.2\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:3000\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] {
          keepAlive: true,
          scheduling: 'lifo',
          timeout: 5000,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'localhost:3000:': [
            Socket {
              connecting: false,
              _hadError: true,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _events: {
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener],
                  [Function: bound onceWrapper] {
                    listener: [Function: onClose]
                  }
                ],
                error: [Function: socketErrorListener],
                prefinish: undefined,
                finish: undefined,
                drain: [Function: ondrain],
                data: undefined,
                end: [Function: onReadableStreamEnd],
                readable: undefined,
                connect: [
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function: connect]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                ],
                free: [Function: onFree],
                timeout: [
                  [Function: onTimeout],
                  [Function: bound onceWrapper] {
                    listener: [Function: emitRequestTimeout]
                  },
                  [Function (anonymous)]
                ],
                agentRemove: [Function: onRemove]
              },
              _readableState: ReadableState {
                highWaterMark: 16384,
                buffer: [],
                bufferIndex: 0,
                length: 0,
                pipes: [],
                awaitDrainWriters: null,
                Symbol(kState): 59777526,
                Symbol(kErroredValue): AggregateError: 
                    at internalConnectMultiple (node:net:1134:18)
                    at afterConnectMultiple (node:net:1715:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:3000
                        at createConnectionError (node:net:1678:14)
                        at afterConnectMultiple (node:net:1708:16) {
                      errno: -4078,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 3000
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:3000
                        at createConnectionError (node:net:1678:14)
                        at afterConnectMultiple (node:net:1708:16) {
                      errno: -4078,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 3000
                    }
                  ]
                }
              },
              _writableState: WritableState {
                highWaterMark: 16384,
                length: 230,
                corked: 0,
                onwrite: [Function: bound onwrite],
                writelen: 230,
                bufferedIndex: 0,
                pendingcb: 1,
                Symbol(kState): 118260214,
                Symbol(kBufferedValue): null,
                Symbol(kWriteCbValue): [Function: bound onFinish],
                Symbol(kErroredValue): AggregateError: 
                    at internalConnectMultiple (node:net:1134:18)
                    at afterConnectMultiple (node:net:1715:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:3000
                        at createConnectionError (node:net:1678:14)
                        at afterConnectMultiple (node:net:1708:16) {
                      errno: -4078,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 3000
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:3000
                        at createConnectionError (node:net:1678:14)
                        at afterConnectMultiple (node:net:1708:16) {
                      errno: -4078,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 3000
                    }
                  ]
                }
              },
              allowHalfOpen: false,
              _maxListeners: undefined,
              _eventsCount: 8,
              _sockname: null,
              _pendingData: 'GET /api/v1/redis/health HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'User-Agent: axios/1.12.2\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3000\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              _pendingEncoding: 'latin1',
              server: null,
              _server: null,
              timeout: 30000,
              parser: null,
              _httpMessage: [Circular *1],
              autoSelectFamilyAttemptedAddresses: [ '::1:3000', '127.0.0.1:3000' ],
              Symbol(async_id_symbol): 1496,
              Symbol(kHandle): null,
              Symbol(lastWriteQueueSize): 0,
              Symbol(timeout): Timeout {
                _idleTimeout: -1,
                _idlePrev: null,
                _idleNext: null,
                _idleStart: 20509,
                _onTimeout: null,
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: true,
                Symbol(refed): false,
                Symbol(kHasPrimitive): false,
                Symbol(asyncId): 1493,
                Symbol(triggerId): 1488,
                Symbol(kAsyncContextFrame): undefined
              },
              Symbol(kBuffer): null,
              Symbol(kBufferCb): null,
              Symbol(kBufferGen): null,
              Symbol(shapeMode): true,
              Symbol(kCapture): false,
              Symbol(kSetNoDelay): true,
              Symbol(kSetKeepAlive): true,
              Symbol(kSetKeepAliveInitialDelay): 60,
              Symbol(kBytesRead): 0,
              Symbol(kBytesWritten): 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        Symbol(shapeMode): false,
        Symbol(kCapture): false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/api/v1/redis/health',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: [Function: emitRequestTimeout],
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Circular *2],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(kBytesWritten): 0,
      Symbol(kNeedDrain): false,
      Symbol(corked): 0,
      Symbol(kChunkedBuffer): [],
      Symbol(kChunkedLength): 0,
      Symbol(kSocket): Socket {
        connecting: false,
        _hadError: true,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _events: {
          close: [
            [Function: onClose],
            [Function: socketCloseListener],
            [Function: bound onceWrapper] {
              listener: [Function: onClose]
            }
          ],
          error: [Function: socketErrorListener],
          prefinish: undefined,
          finish: undefined,
          drain: [Function: ondrain],
          data: undefined,
          end: [Function: onReadableStreamEnd],
          readable: undefined,
          connect: [
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: bound onceWrapper] {
              listener: [Function: connect]
            },
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            }
          ],
          free: [Function: onFree],
          timeout: [
            [Function: onTimeout],
            [Function: bound onceWrapper] {
              listener: [Function: emitRequestTimeout]
            },
            [Function (anonymous)]
          ],
          agentRemove: [Function: onRemove]
        },
        _readableState: ReadableState {
          highWaterMark: 16384,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          Symbol(kState): 59777526,
          Symbol(kErroredValue): AggregateError: 
              at internalConnectMultiple (node:net:1134:18)
              at afterConnectMultiple (node:net:1715:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:3000
                  at createConnectionError (node:net:1678:14)
                  at afterConnectMultiple (node:net:1708:16) {
                errno: -4078,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 3000
              },
              Error: connect ECONNREFUSED 127.0.0.1:3000
                  at createConnectionError (node:net:1678:14)
                  at afterConnectMultiple (node:net:1708:16) {
                errno: -4078,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 3000
              }
            ]
          }
        },
        _writableState: WritableState {
          highWaterMark: 16384,
          length: 230,
          corked: 0,
          onwrite: [Function: bound onwrite],
          writelen: 230,
          bufferedIndex: 0,
          pendingcb: 1,
          Symbol(kState): 118260214,
          Symbol(kBufferedValue): null,
          Symbol(kWriteCbValue): [Function: bound onFinish],
          Symbol(kErroredValue): AggregateError: 
              at internalConnectMultiple (node:net:1134:18)
              at afterConnectMultiple (node:net:1715:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:3000
                  at createConnectionError (node:net:1678:14)
                  at afterConnectMultiple (node:net:1708:16) {
                errno: -4078,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 3000
              },
              Error: connect ECONNREFUSED 127.0.0.1:3000
                  at createConnectionError (node:net:1678:14)
                  at afterConnectMultiple (node:net:1708:16) {
                errno: -4078,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 3000
              }
            ]
          }
        },
        allowHalfOpen: false,
        _maxListeners: undefined,
        _eventsCount: 8,
        _sockname: null,
        _pendingData: 'GET /api/v1/redis/health HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'User-Agent: axios/1.12.2\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3000\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _pendingEncoding: 'latin1',
        server: null,
        _server: null,
        timeout: 30000,
        parser: null,
        _httpMessage: [Circular *1],
        autoSelectFamilyAttemptedAddresses: [ '::1:3000', '127.0.0.1:3000' ],
        Symbol(async_id_symbol): 1496,
        Symbol(kHandle): null,
        Symbol(lastWriteQueueSize): 0,
        Symbol(timeout): Timeout {
          _idleTimeout: -1,
          _idlePrev: null,
          _idleNext: null,
          _idleStart: 20509,
          _onTimeout: null,
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: true,
          Symbol(refed): false,
          Symbol(kHasPrimitive): false,
          Symbol(asyncId): 1493,
          Symbol(triggerId): 1488,
          Symbol(kAsyncContextFrame): undefined
        },
        Symbol(kBuffer): null,
        Symbol(kBufferCb): null,
        Symbol(kBufferGen): null,
        Symbol(shapeMode): true,
        Symbol(kCapture): false,
        Symbol(kSetNoDelay): true,
        Symbol(kSetKeepAlive): true,
        Symbol(kSetKeepAliveInitialDelay): 60,
        Symbol(kBytesRead): 0,
        Symbol(kBytesWritten): 0
      },
      Symbol(kOutHeaders): [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost:3000' ]
      },
      Symbol(errored): null,
      Symbol(kHighWaterMark): 16384,
      Symbol(kRejectNonStandardBodyWrites): false,
      Symbol(kUniqueHeaders): null
    },
    _currentUrl: 'http://localhost:3000/api/v1/redis/health',
    _timeout: null,
    Symbol(shapeMode): true,
    Symbol(kCapture): false
  },
  level: 'error',
  stack: 'AggregateError: Error\n' +
    '    at AxiosError.from (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\node_modules\\axios\\lib\\core\\AxiosError.js:96:14)\n' +
    '    at RedirectableRequest.handleRequestError (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\node_modules\\axios\\lib\\adapters\\http.js:638:25)\n' +
    '    at RedirectableRequest.emit (node:events:519:35)\n' +
    '    at ClientRequest.eventHandlers.<computed> (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\node_modules\\follow-redirects\\index.js:49:24)\n' +
    '    at ClientRequest.emit (node:events:507:28)\n' +
    '    at emitErrorEvent (node:_http_client:104:11)\n' +
    '    at Socket.socketErrorListener (node:_http_client:518:5)\n' +
    '    at Socket.emit (node:events:507:28)\n' +
    '    at emitErrorNT (node:internal/streams/destroy:170:8)\n' +
    '    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n' +
    '    at Axios.request (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\node_modules\\axios\\lib\\core\\Axios.js:45:41)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at RedisService.makeRequest (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\src\\services\\RedisService.ts:384:26)\n' +
    '    at RedisService.healthCheck (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\src\\services\\RedisService.ts:356:24)\n' +
    '    at RedisService.connect (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\src\\services\\RedisService.ts:21:22)\n' +
    '    at HallService.start (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\src\\index.ts:152:7)',
  cause: AggregateError: 
      at internalConnectMultiple (node:net:1134:18)
      at afterConnectMultiple (node:net:1715:7) {
    code: 'ECONNREFUSED',
    [errors]: [
      Error: connect ECONNREFUSED ::1:3000
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3000
      },
      Error: connect ECONNREFUSED 127.0.0.1:3000
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3000
      }
    ]
  },
  timestamp: '2025-10-30 09:52:00.594'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  database: 'MongoDB (Mongoose)',
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-10-30 09:57:25.659'
}
{
  message: 'Database connected successfully',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-30 09:57:25.695'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  code: 'ECONNREFUSED',
  errors: [
    Error: connect ECONNREFUSED ::1:3000
        at createConnectionError (node:net:1678:14)
        at afterConnectMultiple (node:net:1708:16) {
      errno: -4078,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '::1',
      port: 3000
    },
    Error: connect ECONNREFUSED 127.0.0.1:3000
        at createConnectionError (node:net:1678:14)
        at afterConnectMultiple (node:net:1708:16) {
      errno: -4078,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 3000
    }
  ],
  message: 'Redis service health check failed: Error',
  name: 'AggregateError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      'User-Agent': 'axios/1.12.2',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    method: 'get',
    url: 'http://localhost:3000/api/v1/redis/health',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *2> Writable {
    _events: {
      close: undefined,
      error: [Function: handleRequestError],
      prefinish: undefined,
      finish: undefined,
      drain: undefined,
      response: [Function: handleResponse],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ],
      timeout: undefined,
      abort: undefined
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      Symbol(kState): 17580812,
      Symbol(kBufferedValue): null
    },
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: Infinity,
      protocol: 'http:',
      path: '/api/v1/redis/health',
      method: 'GET',
      headers: [Object: null prototype] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'User-Agent': 'axios/1.12.2',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      agents: { http: undefined, https: undefined },
      auth: undefined,
      family: undefined,
      beforeRedirect: [Function: dispatchBeforeRedirect],
      beforeRedirects: { proxy: [Function: beforeRedirect] },
      hostname: 'localhost',
      port: '3000',
      agent: undefined,
      nativeProtocols: {
        'http:': {
          _connectionListener: [Function: connectionListener],
          METHODS: [
            'ACL',        'BIND',        'CHECKOUT',
            'CONNECT',    'COPY',        'DELETE',
            'GET',        'HEAD',        'LINK',
            'LOCK',       'M-SEARCH',    'MERGE',
            'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
            'MOVE',       'NOTIFY',      'OPTIONS',
            'PATCH',      'POST',        'PROPFIND',
            'PROPPATCH',  'PURGE',       'PUT',
            'QUERY',      'REBIND',      'REPORT',
            'SEARCH',     'SOURCE',      'SUBSCRIBE',
            'TRACE',      'UNBIND',      'UNLINK',
            'UNLOCK',     'UNSUBSCRIBE'
          ],
          STATUS_CODES: {
            '100': 'Continue',
            '101': 'Switching Protocols',
            '102': 'Processing',
            '103': 'Early Hints',
            '200': 'OK',
            '201': 'Created',
            '202': 'Accepted',
            '203': 'Non-Authoritative Information',
            '204': 'No Content',
            '205': 'Reset Content',
            '206': 'Partial Content',
            '207': 'Multi-Status',
            '208': 'Already Reported',
            '226': 'IM Used',
            '300': 'Multiple Choices',
            '301': 'Moved Permanently',
            '302': 'Found',
            '303': 'See Other',
            '304': 'Not Modified',
            '305': 'Use Proxy',
            '307': 'Temporary Redirect',
            '308': 'Permanent Redirect',
            '400': 'Bad Request',
            '401': 'Unauthorized',
            '402': 'Payment Required',
            '403': 'Forbidden',
            '404': 'Not Found',
            '405': 'Method Not Allowed',
            '406': 'Not Acceptable',
            '407': 'Proxy Authentication Required',
            '408': 'Request Timeout',
            '409': 'Conflict',
            '410': 'Gone',
            '411': 'Length Required',
            '412': 'Precondition Failed',
            '413': 'Payload Too Large',
            '414': 'URI Too Long',
            '415': 'Unsupported Media Type',
            '416': 'Range Not Satisfiable',
            '417': 'Expectation Failed',
            '418': "I'm a Teapot",
            '421': 'Misdirected Request',
            '422': 'Unprocessable Entity',
            '423': 'Locked',
            '424': 'Failed Dependency',
            '425': 'Too Early',
            '426': 'Upgrade Required',
            '428': 'Precondition Required',
            '429': 'Too Many Requests',
            '431': 'Request Header Fields Too Large',
            '451': 'Unavailable For Legal Reasons',
            '500': 'Internal Server Error',
            '501': 'Not Implemented',
            '502': 'Bad Gateway',
            '503': 'Service Unavailable',
            '504': 'Gateway Timeout',
            '505': 'HTTP Version Not Supported',
            '506': 'Variant Also Negotiates',
            '507': 'Insufficient Storage',
            '508': 'Loop Detected',
            '509': 'Bandwidth Limit Exceeded',
            '510': 'Not Extended',
            '511': 'Network Authentication Required'
          },
          Agent: [Function: Agent] { defaultMaxSockets: Infinity },
          ClientRequest: [Function: ClientRequest],
          IncomingMessage: [Function: IncomingMessage],
          OutgoingMessage: [Function: OutgoingMessage],
          Server: [Function: Server],
          ServerResponse: [Function: ServerResponse],
          createServer: [Function: createServer],
          validateHeaderName: [Function: validateHeaderName] {
            withoutStackTrace: [Function (anonymous)]
          },
          validateHeaderValue: [Function: validateHeaderValue] {
            withoutStackTrace: [Function (anonymous)]
          },
          get: [Function: get],
          request: [Function: request],
          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
          maxHeaderSize: [Getter],
          globalAgent: [Getter/Setter],
          WebSocket: [Getter],
          CloseEvent: [Getter],
          MessageEvent: [Getter]
        },
        'https:': {
          Agent: [Function: Agent],
          globalAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: true,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            Symbol(shapeMode): false,
            Symbol(kCapture): false
          },
          Server: [Function: Server],
          createServer: [Function: createServer],
          get: [Function: get],
          request: [Function: request]
        }
      },
      pathname: '/api/v1/redis/health'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _eventsCount: 3,
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        response: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        },
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      _header: 'GET /api/v1/redis/health HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'User-Agent: axios/1.12.2\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:3000\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] {
          keepAlive: true,
          scheduling: 'lifo',
          timeout: 5000,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'localhost:3000:': [
            Socket {
              connecting: false,
              _hadError: true,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _events: {
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener],
                  [Function: bound onceWrapper] {
                    listener: [Function: onClose]
                  }
                ],
                error: [Function: socketErrorListener],
                prefinish: undefined,
                finish: undefined,
                drain: [Function: ondrain],
                data: undefined,
                end: [Function: onReadableStreamEnd],
                readable: undefined,
                connect: [
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function: connect]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                ],
                free: [Function: onFree],
                timeout: [
                  [Function: onTimeout],
                  [Function: bound onceWrapper] {
                    listener: [Function: emitRequestTimeout]
                  },
                  [Function (anonymous)]
                ],
                agentRemove: [Function: onRemove]
              },
              _readableState: ReadableState {
                highWaterMark: 16384,
                buffer: [],
                bufferIndex: 0,
                length: 0,
                pipes: [],
                awaitDrainWriters: null,
                Symbol(kState): 59777526,
                Symbol(kErroredValue): AggregateError: 
                    at internalConnectMultiple (node:net:1134:18)
                    at afterConnectMultiple (node:net:1715:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:3000
                        at createConnectionError (node:net:1678:14)
                        at afterConnectMultiple (node:net:1708:16) {
                      errno: -4078,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 3000
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:3000
                        at createConnectionError (node:net:1678:14)
                        at afterConnectMultiple (node:net:1708:16) {
                      errno: -4078,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 3000
                    }
                  ]
                }
              },
              _writableState: WritableState {
                highWaterMark: 16384,
                length: 230,
                corked: 0,
                onwrite: [Function: bound onwrite],
                writelen: 230,
                bufferedIndex: 0,
                pendingcb: 1,
                Symbol(kState): 118260214,
                Symbol(kBufferedValue): null,
                Symbol(kWriteCbValue): [Function: bound onFinish],
                Symbol(kErroredValue): AggregateError: 
                    at internalConnectMultiple (node:net:1134:18)
                    at afterConnectMultiple (node:net:1715:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:3000
                        at createConnectionError (node:net:1678:14)
                        at afterConnectMultiple (node:net:1708:16) {
                      errno: -4078,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 3000
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:3000
                        at createConnectionError (node:net:1678:14)
                        at afterConnectMultiple (node:net:1708:16) {
                      errno: -4078,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 3000
                    }
                  ]
                }
              },
              allowHalfOpen: false,
              _maxListeners: undefined,
              _eventsCount: 8,
              _sockname: null,
              _pendingData: 'GET /api/v1/redis/health HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'User-Agent: axios/1.12.2\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3000\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              _pendingEncoding: 'latin1',
              server: null,
              _server: null,
              timeout: 30000,
              parser: null,
              _httpMessage: [Circular *1],
              autoSelectFamilyAttemptedAddresses: [ '::1:3000', '127.0.0.1:3000' ],
              Symbol(async_id_symbol): 1487,
              Symbol(kHandle): null,
              Symbol(lastWriteQueueSize): 0,
              Symbol(timeout): Timeout {
                _idleTimeout: -1,
                _idlePrev: null,
                _idleNext: null,
                _idleStart: 13449,
                _onTimeout: null,
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: true,
                Symbol(refed): false,
                Symbol(kHasPrimitive): false,
                Symbol(asyncId): 1481,
                Symbol(triggerId): 1476,
                Symbol(kAsyncContextFrame): undefined
              },
              Symbol(kBuffer): null,
              Symbol(kBufferCb): null,
              Symbol(kBufferGen): null,
              Symbol(shapeMode): true,
              Symbol(kCapture): false,
              Symbol(kSetNoDelay): true,
              Symbol(kSetKeepAlive): true,
              Symbol(kSetKeepAliveInitialDelay): 60,
              Symbol(kBytesRead): 0,
              Symbol(kBytesWritten): 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        Symbol(shapeMode): false,
        Symbol(kCapture): false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/api/v1/redis/health',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: [Function: emitRequestTimeout],
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Circular *2],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(kBytesWritten): 0,
      Symbol(kNeedDrain): false,
      Symbol(corked): 0,
      Symbol(kChunkedBuffer): [],
      Symbol(kChunkedLength): 0,
      Symbol(kSocket): Socket {
        connecting: false,
        _hadError: true,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _events: {
          close: [
            [Function: onClose],
            [Function: socketCloseListener],
            [Function: bound onceWrapper] {
              listener: [Function: onClose]
            }
          ],
          error: [Function: socketErrorListener],
          prefinish: undefined,
          finish: undefined,
          drain: [Function: ondrain],
          data: undefined,
          end: [Function: onReadableStreamEnd],
          readable: undefined,
          connect: [
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: bound onceWrapper] {
              listener: [Function: connect]
            },
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            }
          ],
          free: [Function: onFree],
          timeout: [
            [Function: onTimeout],
            [Function: bound onceWrapper] {
              listener: [Function: emitRequestTimeout]
            },
            [Function (anonymous)]
          ],
          agentRemove: [Function: onRemove]
        },
        _readableState: ReadableState {
          highWaterMark: 16384,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          Symbol(kState): 59777526,
          Symbol(kErroredValue): AggregateError: 
              at internalConnectMultiple (node:net:1134:18)
              at afterConnectMultiple (node:net:1715:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:3000
                  at createConnectionError (node:net:1678:14)
                  at afterConnectMultiple (node:net:1708:16) {
                errno: -4078,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 3000
              },
              Error: connect ECONNREFUSED 127.0.0.1:3000
                  at createConnectionError (node:net:1678:14)
                  at afterConnectMultiple (node:net:1708:16) {
                errno: -4078,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 3000
              }
            ]
          }
        },
        _writableState: WritableState {
          highWaterMark: 16384,
          length: 230,
          corked: 0,
          onwrite: [Function: bound onwrite],
          writelen: 230,
          bufferedIndex: 0,
          pendingcb: 1,
          Symbol(kState): 118260214,
          Symbol(kBufferedValue): null,
          Symbol(kWriteCbValue): [Function: bound onFinish],
          Symbol(kErroredValue): AggregateError: 
              at internalConnectMultiple (node:net:1134:18)
              at afterConnectMultiple (node:net:1715:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:3000
                  at createConnectionError (node:net:1678:14)
                  at afterConnectMultiple (node:net:1708:16) {
                errno: -4078,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 3000
              },
              Error: connect ECONNREFUSED 127.0.0.1:3000
                  at createConnectionError (node:net:1678:14)
                  at afterConnectMultiple (node:net:1708:16) {
                errno: -4078,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 3000
              }
            ]
          }
        },
        allowHalfOpen: false,
        _maxListeners: undefined,
        _eventsCount: 8,
        _sockname: null,
        _pendingData: 'GET /api/v1/redis/health HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'User-Agent: axios/1.12.2\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3000\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _pendingEncoding: 'latin1',
        server: null,
        _server: null,
        timeout: 30000,
        parser: null,
        _httpMessage: [Circular *1],
        autoSelectFamilyAttemptedAddresses: [ '::1:3000', '127.0.0.1:3000' ],
        Symbol(async_id_symbol): 1487,
        Symbol(kHandle): null,
        Symbol(lastWriteQueueSize): 0,
        Symbol(timeout): Timeout {
          _idleTimeout: -1,
          _idlePrev: null,
          _idleNext: null,
          _idleStart: 13449,
          _onTimeout: null,
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: true,
          Symbol(refed): false,
          Symbol(kHasPrimitive): false,
          Symbol(asyncId): 1481,
          Symbol(triggerId): 1476,
          Symbol(kAsyncContextFrame): undefined
        },
        Symbol(kBuffer): null,
        Symbol(kBufferCb): null,
        Symbol(kBufferGen): null,
        Symbol(shapeMode): true,
        Symbol(kCapture): false,
        Symbol(kSetNoDelay): true,
        Symbol(kSetKeepAlive): true,
        Symbol(kSetKeepAliveInitialDelay): 60,
        Symbol(kBytesRead): 0,
        Symbol(kBytesWritten): 0
      },
      Symbol(kOutHeaders): [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost:3000' ]
      },
      Symbol(errored): null,
      Symbol(kHighWaterMark): 16384,
      Symbol(kRejectNonStandardBodyWrites): false,
      Symbol(kUniqueHeaders): null
    },
    _currentUrl: 'http://localhost:3000/api/v1/redis/health',
    _timeout: null,
    Symbol(shapeMode): true,
    Symbol(kCapture): false
  },
  level: 'error',
  stack: 'AggregateError: Error\n' +
    '    at AxiosError.from (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\node_modules\\axios\\lib\\core\\AxiosError.js:96:14)\n' +
    '    at RedirectableRequest.handleRequestError (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\node_modules\\axios\\lib\\adapters\\http.js:638:25)\n' +
    '    at RedirectableRequest.emit (node:events:519:35)\n' +
    '    at ClientRequest.eventHandlers.<computed> (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\node_modules\\follow-redirects\\index.js:49:24)\n' +
    '    at ClientRequest.emit (node:events:507:28)\n' +
    '    at emitErrorEvent (node:_http_client:104:11)\n' +
    '    at Socket.socketErrorListener (node:_http_client:518:5)\n' +
    '    at Socket.emit (node:events:507:28)\n' +
    '    at emitErrorNT (node:internal/streams/destroy:170:8)\n' +
    '    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n' +
    '    at Axios.request (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\node_modules\\axios\\lib\\core\\Axios.js:45:41)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at RedisService.makeRequest (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\src\\services\\RedisService.ts:384:26)\n' +
    '    at RedisService.healthCheck (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\src\\services\\RedisService.ts:356:24)\n' +
    '    at RedisService.connect (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\src\\services\\RedisService.ts:21:22)\n' +
    '    at HallService.start (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\src\\index.ts:152:7)',
  cause: AggregateError: 
      at internalConnectMultiple (node:net:1134:18)
      at afterConnectMultiple (node:net:1715:7) {
    code: 'ECONNREFUSED',
    [errors]: [
      Error: connect ECONNREFUSED ::1:3000
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3000
      },
      Error: connect ECONNREFUSED 127.0.0.1:3000
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3000
      }
    ]
  },
  timestamp: '2025-10-30 09:57:28.630'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  database: 'MongoDB (Mongoose)',
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-10-30 09:57:41.968'
}
{
  message: 'Database connected successfully',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-30 09:57:41.994'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  code: 'ECONNREFUSED',
  errors: [
    Error: connect ECONNREFUSED ::1:3000
        at createConnectionError (node:net:1678:14)
        at afterConnectMultiple (node:net:1708:16) {
      errno: -4078,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '::1',
      port: 3000
    },
    Error: connect ECONNREFUSED 127.0.0.1:3000
        at createConnectionError (node:net:1678:14)
        at afterConnectMultiple (node:net:1708:16) {
      errno: -4078,
      code: 'ECONNREFUSED',
      syscall: 'connect',
      address: '127.0.0.1',
      port: 3000
    }
  ],
  message: 'Redis service health check failed: Error',
  name: 'AggregateError',
  config: {
    transitional: {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    },
    adapter: [ 'xhr', 'http', 'fetch' ],
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 30000,
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    maxBodyLength: -1,
    env: {
      FormData: [Function: FormData] [FormData] {
        LINE_BREAK: '\r\n',
        DEFAULT_CONTENT_TYPE: 'application/octet-stream'
      },
      Blob: [class Blob]
    },
    validateStatus: [Function: validateStatus],
    headers: Object [AxiosHeaders] {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json',
      'User-Agent': 'axios/1.12.2',
      'Accept-Encoding': 'gzip, compress, deflate, br'
    },
    method: 'get',
    url: 'http://localhost:3000/api/v1/redis/health',
    allowAbsoluteUrls: true,
    data: undefined
  },
  request: <ref *2> Writable {
    _events: {
      close: undefined,
      error: [Function: handleRequestError],
      prefinish: undefined,
      finish: undefined,
      drain: undefined,
      response: [Function: handleResponse],
      socket: [ [Function: handleRequestSocket], [Function: destroyOnTimeout] ],
      timeout: undefined,
      abort: undefined
    },
    _writableState: WritableState {
      highWaterMark: 16384,
      length: 0,
      corked: 0,
      onwrite: [Function: bound onwrite],
      writelen: 0,
      bufferedIndex: 0,
      pendingcb: 0,
      Symbol(kState): 17580812,
      Symbol(kBufferedValue): null
    },
    _maxListeners: undefined,
    _options: {
      maxRedirects: 21,
      maxBodyLength: Infinity,
      protocol: 'http:',
      path: '/api/v1/redis/health',
      method: 'GET',
      headers: [Object: null prototype] {
        Accept: 'application/json, text/plain, */*',
        'Content-Type': 'application/json',
        'User-Agent': 'axios/1.12.2',
        'Accept-Encoding': 'gzip, compress, deflate, br'
      },
      agents: { http: undefined, https: undefined },
      auth: undefined,
      family: undefined,
      beforeRedirect: [Function: dispatchBeforeRedirect],
      beforeRedirects: { proxy: [Function: beforeRedirect] },
      hostname: 'localhost',
      port: '3000',
      agent: undefined,
      nativeProtocols: {
        'http:': {
          _connectionListener: [Function: connectionListener],
          METHODS: [
            'ACL',        'BIND',        'CHECKOUT',
            'CONNECT',    'COPY',        'DELETE',
            'GET',        'HEAD',        'LINK',
            'LOCK',       'M-SEARCH',    'MERGE',
            'MKACTIVITY', 'MKCALENDAR',  'MKCOL',
            'MOVE',       'NOTIFY',      'OPTIONS',
            'PATCH',      'POST',        'PROPFIND',
            'PROPPATCH',  'PURGE',       'PUT',
            'QUERY',      'REBIND',      'REPORT',
            'SEARCH',     'SOURCE',      'SUBSCRIBE',
            'TRACE',      'UNBIND',      'UNLINK',
            'UNLOCK',     'UNSUBSCRIBE'
          ],
          STATUS_CODES: {
            '100': 'Continue',
            '101': 'Switching Protocols',
            '102': 'Processing',
            '103': 'Early Hints',
            '200': 'OK',
            '201': 'Created',
            '202': 'Accepted',
            '203': 'Non-Authoritative Information',
            '204': 'No Content',
            '205': 'Reset Content',
            '206': 'Partial Content',
            '207': 'Multi-Status',
            '208': 'Already Reported',
            '226': 'IM Used',
            '300': 'Multiple Choices',
            '301': 'Moved Permanently',
            '302': 'Found',
            '303': 'See Other',
            '304': 'Not Modified',
            '305': 'Use Proxy',
            '307': 'Temporary Redirect',
            '308': 'Permanent Redirect',
            '400': 'Bad Request',
            '401': 'Unauthorized',
            '402': 'Payment Required',
            '403': 'Forbidden',
            '404': 'Not Found',
            '405': 'Method Not Allowed',
            '406': 'Not Acceptable',
            '407': 'Proxy Authentication Required',
            '408': 'Request Timeout',
            '409': 'Conflict',
            '410': 'Gone',
            '411': 'Length Required',
            '412': 'Precondition Failed',
            '413': 'Payload Too Large',
            '414': 'URI Too Long',
            '415': 'Unsupported Media Type',
            '416': 'Range Not Satisfiable',
            '417': 'Expectation Failed',
            '418': "I'm a Teapot",
            '421': 'Misdirected Request',
            '422': 'Unprocessable Entity',
            '423': 'Locked',
            '424': 'Failed Dependency',
            '425': 'Too Early',
            '426': 'Upgrade Required',
            '428': 'Precondition Required',
            '429': 'Too Many Requests',
            '431': 'Request Header Fields Too Large',
            '451': 'Unavailable For Legal Reasons',
            '500': 'Internal Server Error',
            '501': 'Not Implemented',
            '502': 'Bad Gateway',
            '503': 'Service Unavailable',
            '504': 'Gateway Timeout',
            '505': 'HTTP Version Not Supported',
            '506': 'Variant Also Negotiates',
            '507': 'Insufficient Storage',
            '508': 'Loop Detected',
            '509': 'Bandwidth Limit Exceeded',
            '510': 'Not Extended',
            '511': 'Network Authentication Required'
          },
          Agent: [Function: Agent] { defaultMaxSockets: Infinity },
          ClientRequest: [Function: ClientRequest],
          IncomingMessage: [Function: IncomingMessage],
          OutgoingMessage: [Function: OutgoingMessage],
          Server: [Function: Server],
          ServerResponse: [Function: ServerResponse],
          createServer: [Function: createServer],
          validateHeaderName: [Function: validateHeaderName] {
            withoutStackTrace: [Function (anonymous)]
          },
          validateHeaderValue: [Function: validateHeaderValue] {
            withoutStackTrace: [Function (anonymous)]
          },
          get: [Function: get],
          request: [Function: request],
          setMaxIdleHTTPParsers: [Function: setMaxIdleHTTPParsers],
          maxHeaderSize: [Getter],
          globalAgent: [Getter/Setter],
          WebSocket: [Getter],
          CloseEvent: [Getter],
          MessageEvent: [Getter]
        },
        'https:': {
          Agent: [Function: Agent],
          globalAgent: Agent {
            _events: [Object: null prototype] {
              free: [Function (anonymous)],
              newListener: [Function: maybeEnableKeylog]
            },
            _eventsCount: 2,
            _maxListeners: undefined,
            defaultPort: 443,
            protocol: 'https:',
            options: [Object: null prototype] {
              keepAlive: true,
              scheduling: 'lifo',
              timeout: 5000,
              noDelay: true,
              path: null
            },
            requests: [Object: null prototype] {},
            sockets: [Object: null prototype] {},
            freeSockets: [Object: null prototype] {},
            keepAliveMsecs: 1000,
            keepAlive: true,
            maxSockets: Infinity,
            maxFreeSockets: 256,
            scheduling: 'lifo',
            maxTotalSockets: Infinity,
            totalSocketCount: 0,
            maxCachedSessions: 100,
            _sessionCache: { map: {}, list: [] },
            Symbol(shapeMode): false,
            Symbol(kCapture): false
          },
          Server: [Function: Server],
          createServer: [Function: createServer],
          get: [Function: get],
          request: [Function: request]
        }
      },
      pathname: '/api/v1/redis/health'
    },
    _ended: true,
    _ending: true,
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 0,
    _requestBodyBuffers: [],
    _eventsCount: 3,
    _onNativeResponse: [Function (anonymous)],
    _currentRequest: <ref *1> ClientRequest {
      _events: [Object: null prototype] {
        response: [Function: bound onceWrapper] {
          listener: [Function (anonymous)]
        },
        abort: [Function (anonymous)],
        aborted: [Function (anonymous)],
        connect: [Function (anonymous)],
        error: [Function (anonymous)],
        socket: [Function (anonymous)],
        timeout: [Function (anonymous)]
      },
      _eventsCount: 7,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      destroyed: false,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: true,
      maxRequestsOnConnectionReached: false,
      _defaultKeepAlive: true,
      useChunkedEncodingByDefault: false,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      strictContentLength: false,
      _contentLength: 0,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      _closed: false,
      _header: 'GET /api/v1/redis/health HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json\r\n' +
        'User-Agent: axios/1.12.2\r\n' +
        'Accept-Encoding: gzip, compress, deflate, br\r\n' +
        'Host: localhost:3000\r\n' +
        'Connection: keep-alive\r\n' +
        '\r\n',
      _keepAliveTimeout: 0,
      _onPendingData: [Function: nop],
      agent: Agent {
        _events: [Object: null prototype] {
          free: [Function (anonymous)],
          newListener: [Function: maybeEnableKeylog]
        },
        _eventsCount: 2,
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object: null prototype] {
          keepAlive: true,
          scheduling: 'lifo',
          timeout: 5000,
          noDelay: true,
          path: null
        },
        requests: [Object: null prototype] {},
        sockets: [Object: null prototype] {
          'localhost:3000:': [
            Socket {
              connecting: false,
              _hadError: true,
              _parent: null,
              _host: 'localhost',
              _closeAfterHandlingError: false,
              _events: {
                close: [
                  [Function: onClose],
                  [Function: socketCloseListener],
                  [Function: bound onceWrapper] {
                    listener: [Function: onClose]
                  }
                ],
                error: [Function: socketErrorListener],
                prefinish: undefined,
                finish: undefined,
                drain: [Function: ondrain],
                data: undefined,
                end: [Function: onReadableStreamEnd],
                readable: undefined,
                connect: [
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function: connect]
                  },
                  [Function: bound onceWrapper] {
                    listener: [Function (anonymous)]
                  }
                ],
                free: [Function: onFree],
                timeout: [
                  [Function: onTimeout],
                  [Function: bound onceWrapper] {
                    listener: [Function: emitRequestTimeout]
                  },
                  [Function (anonymous)]
                ],
                agentRemove: [Function: onRemove]
              },
              _readableState: ReadableState {
                highWaterMark: 16384,
                buffer: [],
                bufferIndex: 0,
                length: 0,
                pipes: [],
                awaitDrainWriters: null,
                Symbol(kState): 59777526,
                Symbol(kErroredValue): AggregateError: 
                    at internalConnectMultiple (node:net:1134:18)
                    at afterConnectMultiple (node:net:1715:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:3000
                        at createConnectionError (node:net:1678:14)
                        at afterConnectMultiple (node:net:1708:16) {
                      errno: -4078,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 3000
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:3000
                        at createConnectionError (node:net:1678:14)
                        at afterConnectMultiple (node:net:1708:16) {
                      errno: -4078,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 3000
                    }
                  ]
                }
              },
              _writableState: WritableState {
                highWaterMark: 16384,
                length: 230,
                corked: 0,
                onwrite: [Function: bound onwrite],
                writelen: 230,
                bufferedIndex: 0,
                pendingcb: 1,
                Symbol(kState): 118260214,
                Symbol(kBufferedValue): null,
                Symbol(kWriteCbValue): [Function: bound onFinish],
                Symbol(kErroredValue): AggregateError: 
                    at internalConnectMultiple (node:net:1134:18)
                    at afterConnectMultiple (node:net:1715:7) {
                  code: 'ECONNREFUSED',
                  [errors]: [
                    Error: connect ECONNREFUSED ::1:3000
                        at createConnectionError (node:net:1678:14)
                        at afterConnectMultiple (node:net:1708:16) {
                      errno: -4078,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '::1',
                      port: 3000
                    },
                    Error: connect ECONNREFUSED 127.0.0.1:3000
                        at createConnectionError (node:net:1678:14)
                        at afterConnectMultiple (node:net:1708:16) {
                      errno: -4078,
                      code: 'ECONNREFUSED',
                      syscall: 'connect',
                      address: '127.0.0.1',
                      port: 3000
                    }
                  ]
                }
              },
              allowHalfOpen: false,
              _maxListeners: undefined,
              _eventsCount: 8,
              _sockname: null,
              _pendingData: 'GET /api/v1/redis/health HTTP/1.1\r\n' +
                'Accept: application/json, text/plain, */*\r\n' +
                'Content-Type: application/json\r\n' +
                'User-Agent: axios/1.12.2\r\n' +
                'Accept-Encoding: gzip, compress, deflate, br\r\n' +
                'Host: localhost:3000\r\n' +
                'Connection: keep-alive\r\n' +
                '\r\n',
              _pendingEncoding: 'latin1',
              server: null,
              _server: null,
              timeout: 30000,
              parser: null,
              _httpMessage: [Circular *1],
              autoSelectFamilyAttemptedAddresses: [ '::1:3000', '127.0.0.1:3000' ],
              Symbol(async_id_symbol): 1494,
              Symbol(kHandle): null,
              Symbol(lastWriteQueueSize): 0,
              Symbol(timeout): Timeout {
                _idleTimeout: -1,
                _idlePrev: null,
                _idleNext: null,
                _idleStart: 14239,
                _onTimeout: null,
                _timerArgs: undefined,
                _repeat: null,
                _destroyed: true,
                Symbol(refed): false,
                Symbol(kHasPrimitive): false,
                Symbol(asyncId): 1488,
                Symbol(triggerId): 1483,
                Symbol(kAsyncContextFrame): undefined
              },
              Symbol(kBuffer): null,
              Symbol(kBufferCb): null,
              Symbol(kBufferGen): null,
              Symbol(shapeMode): true,
              Symbol(kCapture): false,
              Symbol(kSetNoDelay): true,
              Symbol(kSetKeepAlive): true,
              Symbol(kSetKeepAliveInitialDelay): 60,
              Symbol(kBytesRead): 0,
              Symbol(kBytesWritten): 0
            }
          ]
        },
        freeSockets: [Object: null prototype] {},
        keepAliveMsecs: 1000,
        keepAlive: true,
        maxSockets: Infinity,
        maxFreeSockets: 256,
        scheduling: 'lifo',
        maxTotalSockets: Infinity,
        totalSocketCount: 1,
        Symbol(shapeMode): false,
        Symbol(kCapture): false
      },
      socketPath: undefined,
      method: 'GET',
      maxHeaderSize: undefined,
      insecureHTTPParser: undefined,
      joinDuplicateHeaders: undefined,
      path: '/api/v1/redis/health',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: [Function: emitRequestTimeout],
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      reusedSocket: false,
      host: 'localhost',
      protocol: 'http:',
      _redirectable: [Circular *2],
      Symbol(shapeMode): false,
      Symbol(kCapture): false,
      Symbol(kBytesWritten): 0,
      Symbol(kNeedDrain): false,
      Symbol(corked): 0,
      Symbol(kChunkedBuffer): [],
      Symbol(kChunkedLength): 0,
      Symbol(kSocket): Socket {
        connecting: false,
        _hadError: true,
        _parent: null,
        _host: 'localhost',
        _closeAfterHandlingError: false,
        _events: {
          close: [
            [Function: onClose],
            [Function: socketCloseListener],
            [Function: bound onceWrapper] {
              listener: [Function: onClose]
            }
          ],
          error: [Function: socketErrorListener],
          prefinish: undefined,
          finish: undefined,
          drain: [Function: ondrain],
          data: undefined,
          end: [Function: onReadableStreamEnd],
          readable: undefined,
          connect: [
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            },
            [Function: bound onceWrapper] {
              listener: [Function: connect]
            },
            [Function: bound onceWrapper] {
              listener: [Function (anonymous)]
            }
          ],
          free: [Function: onFree],
          timeout: [
            [Function: onTimeout],
            [Function: bound onceWrapper] {
              listener: [Function: emitRequestTimeout]
            },
            [Function (anonymous)]
          ],
          agentRemove: [Function: onRemove]
        },
        _readableState: ReadableState {
          highWaterMark: 16384,
          buffer: [],
          bufferIndex: 0,
          length: 0,
          pipes: [],
          awaitDrainWriters: null,
          Symbol(kState): 59777526,
          Symbol(kErroredValue): AggregateError: 
              at internalConnectMultiple (node:net:1134:18)
              at afterConnectMultiple (node:net:1715:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:3000
                  at createConnectionError (node:net:1678:14)
                  at afterConnectMultiple (node:net:1708:16) {
                errno: -4078,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 3000
              },
              Error: connect ECONNREFUSED 127.0.0.1:3000
                  at createConnectionError (node:net:1678:14)
                  at afterConnectMultiple (node:net:1708:16) {
                errno: -4078,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 3000
              }
            ]
          }
        },
        _writableState: WritableState {
          highWaterMark: 16384,
          length: 230,
          corked: 0,
          onwrite: [Function: bound onwrite],
          writelen: 230,
          bufferedIndex: 0,
          pendingcb: 1,
          Symbol(kState): 118260214,
          Symbol(kBufferedValue): null,
          Symbol(kWriteCbValue): [Function: bound onFinish],
          Symbol(kErroredValue): AggregateError: 
              at internalConnectMultiple (node:net:1134:18)
              at afterConnectMultiple (node:net:1715:7) {
            code: 'ECONNREFUSED',
            [errors]: [
              Error: connect ECONNREFUSED ::1:3000
                  at createConnectionError (node:net:1678:14)
                  at afterConnectMultiple (node:net:1708:16) {
                errno: -4078,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '::1',
                port: 3000
              },
              Error: connect ECONNREFUSED 127.0.0.1:3000
                  at createConnectionError (node:net:1678:14)
                  at afterConnectMultiple (node:net:1708:16) {
                errno: -4078,
                code: 'ECONNREFUSED',
                syscall: 'connect',
                address: '127.0.0.1',
                port: 3000
              }
            ]
          }
        },
        allowHalfOpen: false,
        _maxListeners: undefined,
        _eventsCount: 8,
        _sockname: null,
        _pendingData: 'GET /api/v1/redis/health HTTP/1.1\r\n' +
          'Accept: application/json, text/plain, */*\r\n' +
          'Content-Type: application/json\r\n' +
          'User-Agent: axios/1.12.2\r\n' +
          'Accept-Encoding: gzip, compress, deflate, br\r\n' +
          'Host: localhost:3000\r\n' +
          'Connection: keep-alive\r\n' +
          '\r\n',
        _pendingEncoding: 'latin1',
        server: null,
        _server: null,
        timeout: 30000,
        parser: null,
        _httpMessage: [Circular *1],
        autoSelectFamilyAttemptedAddresses: [ '::1:3000', '127.0.0.1:3000' ],
        Symbol(async_id_symbol): 1494,
        Symbol(kHandle): null,
        Symbol(lastWriteQueueSize): 0,
        Symbol(timeout): Timeout {
          _idleTimeout: -1,
          _idlePrev: null,
          _idleNext: null,
          _idleStart: 14239,
          _onTimeout: null,
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: true,
          Symbol(refed): false,
          Symbol(kHasPrimitive): false,
          Symbol(asyncId): 1488,
          Symbol(triggerId): 1483,
          Symbol(kAsyncContextFrame): undefined
        },
        Symbol(kBuffer): null,
        Symbol(kBufferCb): null,
        Symbol(kBufferGen): null,
        Symbol(shapeMode): true,
        Symbol(kCapture): false,
        Symbol(kSetNoDelay): true,
        Symbol(kSetKeepAlive): true,
        Symbol(kSetKeepAliveInitialDelay): 60,
        Symbol(kBytesRead): 0,
        Symbol(kBytesWritten): 0
      },
      Symbol(kOutHeaders): [Object: null prototype] {
        accept: [ 'Accept', 'application/json, text/plain, */*' ],
        'content-type': [ 'Content-Type', 'application/json' ],
        'user-agent': [ 'User-Agent', 'axios/1.12.2' ],
        'accept-encoding': [ 'Accept-Encoding', 'gzip, compress, deflate, br' ],
        host: [ 'Host', 'localhost:3000' ]
      },
      Symbol(errored): null,
      Symbol(kHighWaterMark): 16384,
      Symbol(kRejectNonStandardBodyWrites): false,
      Symbol(kUniqueHeaders): null
    },
    _currentUrl: 'http://localhost:3000/api/v1/redis/health',
    _timeout: null,
    Symbol(shapeMode): true,
    Symbol(kCapture): false
  },
  level: 'error',
  stack: 'AggregateError: Error\n' +
    '    at AxiosError.from (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\node_modules\\axios\\lib\\core\\AxiosError.js:96:14)\n' +
    '    at RedirectableRequest.handleRequestError (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\node_modules\\axios\\lib\\adapters\\http.js:638:25)\n' +
    '    at RedirectableRequest.emit (node:events:519:35)\n' +
    '    at ClientRequest.eventHandlers.<computed> (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\node_modules\\follow-redirects\\index.js:49:24)\n' +
    '    at ClientRequest.emit (node:events:507:28)\n' +
    '    at emitErrorEvent (node:_http_client:104:11)\n' +
    '    at Socket.socketErrorListener (node:_http_client:518:5)\n' +
    '    at Socket.emit (node:events:507:28)\n' +
    '    at emitErrorNT (node:internal/streams/destroy:170:8)\n' +
    '    at emitErrorCloseNT (node:internal/streams/destroy:129:3)\n' +
    '    at Axios.request (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\node_modules\\axios\\lib\\core\\Axios.js:45:41)\n' +
    '    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n' +
    '    at RedisService.makeRequest (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\src\\services\\RedisService.ts:384:26)\n' +
    '    at RedisService.healthCheck (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\src\\services\\RedisService.ts:356:24)\n' +
    '    at RedisService.connect (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\src\\services\\RedisService.ts:21:22)\n' +
    '    at HallService.start (D:\\Rubizz hotel\\Server\\rubizz-hall-service\\src\\index.ts:152:7)',
  cause: AggregateError: 
      at internalConnectMultiple (node:net:1134:18)
      at afterConnectMultiple (node:net:1715:7) {
    code: 'ECONNREFUSED',
    [errors]: [
      Error: connect ECONNREFUSED ::1:3000
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '::1',
        port: 3000
      },
      Error: connect ECONNREFUSED 127.0.0.1:3000
          at createConnectionError (node:net:1678:14)
          at afterConnectMultiple (node:net:1708:16) {
        errno: -4078,
        code: 'ECONNREFUSED',
        syscall: 'connect',
        address: '127.0.0.1',
        port: 3000
      }
    ]
  },
  timestamp: '2025-10-30 09:57:44.643'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  database: 'MongoDB (Mongoose)',
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-10-30 09:58:29.701'
}
{
  message: 'Database connected successfully',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-30 09:58:29.706'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  error: 'Error',
  level: 'error',
  message: 'Redis service health check failed:',
  timestamp: '2025-10-30 09:58:32.001'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  database: 'MongoDB (Mongoose)',
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-10-30 09:58:59.885'
}
{
  message: 'Database connected successfully',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-30 09:58:59.888'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  error: 'Error',
  level: 'error',
  message: 'Redis service health check failed:',
  timestamp: '2025-10-30 09:59:02.004'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  database: 'MongoDB (Mongoose)',
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-10-30 10:01:36.009'
}
{
  message: 'Database connected successfully',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-30 10:01:36.012'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  error: 'Error',
  level: 'error',
  message: 'Redis service health check failed:',
  timestamp: '2025-10-30 10:01:38.098'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  database: 'MongoDB (Mongoose)',
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-10-30 11:27:25.379'
}
{
  message: 'Database connected successfully',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-30 11:27:25.382'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  database: 'MongoDB (Mongoose)',
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-10-30 11:27:29.298'
}
{
  message: 'Database connected successfully',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-30 11:27:29.304'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  error: 'Error',
  level: 'error',
  message: 'Redis service health check failed:',
  timestamp: '2025-10-30 11:27:31.360'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  database: 'MongoDB (Mongoose)',
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-10-30 11:28:50.745'
}
{
  message: 'Database connected successfully',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-30 11:28:50.748'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  error: 'Error',
  level: 'error',
  message: 'Redis service health check failed:',
  timestamp: '2025-10-30 11:28:52.834'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  database: 'MongoDB (Mongoose)',
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-10-30 11:33:49.705'
}
{
  message: 'Database connected successfully',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-30 11:33:49.727'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  database: 'MongoDB (Mongoose)',
  level: 'info',
  message: 'Database connected successfully',
  timestamp: '2025-10-30 11:33:54.035'
}
{
  message: 'Database connected successfully',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-30 11:33:54.038'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  error: 'Error',
  level: 'error',
  message: 'Redis service health check failed:',
  timestamp: '2025-10-30 11:33:56.102'
}
{
  message: 'Redis service health check failed',
  level: 'error',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-30 11:33:56.103'
}
{
  message: 'Redis service connected successfully',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-30 11:33:56.103'
}
{
  message: 'GraphQL endpoint mounted at /graphql',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-30 11:33:57.023'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  addr: '0.0.0.0:50051',
  level: 'info',
  message: 'gRPC server started',
  timestamp: '2025-10-30 11:33:57.036'
}
{
  message: 'WebSocket server started at /ws',
  level: 'info',
  service: 'rubizz-hall-service',
  version: '1.0.0',
  timestamp: '2025-10-30 11:33:57.039'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  port: 3007,
  environment: 'development',
  level: 'info',
  message: 'Hall Management Service started',
  timestamp: '2025-10-30 11:33:57.042'
}
{
  service: 'rubizz-hall-service',
  version: '1.0.0',
  error: 'Connection error: ',
  level: 'error',
  message: 'Kafka start failed',
  timestamp: '2025-10-30 11:34:07.439'
}
