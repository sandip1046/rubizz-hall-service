// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Hall Model
model Hall {
  id          String   @id @default(cuid()) @map("_id")
  name        String
  description String?
  capacity    Int
  area        Float
  location    String
  amenities   String[]
  
  // Pricing
  baseRate    Float
  hourlyRate  Float?
  dailyRate   Float?
  weekendRate Float?
  
  // Status
  isActive    Boolean  @default(true)
  isAvailable Boolean  @default(true)
  
  // Images
  images      String[]
  floorPlan   String?
  
  // Relations
  bookings    HallBooking[]
  quotations  HallQuotation[]
  lineItems   HallLineItem[]
  availability HallAvailability[]
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("halls")
}

// Hall Booking Model
model HallBooking {
  id              String   @id @default(cuid()) @map("_id")
  hallId          String
  hall            Hall     @relation(fields: [hallId], references: [id])
  
  // Customer Info
  customerId      String
  customerName    String
  customerEmail   String
  customerPhone   String
  
  // Event Details
  eventName       String
  eventType       EventType
  startDate       DateTime
  endDate         DateTime
  startTime       String
  endTime         String
  duration        Int
  guestCount      Int
  
  // Pricing
  baseAmount      Float
  additionalCharges Float
  discount        Float
  taxAmount       Float
  totalAmount     Float
  depositAmount   Float?
  balanceAmount   Float?
  depositPaid     Boolean @default(false)
  
  // Status
  status          BookingStatus @default(PENDING)
  paymentStatus   PaymentStatus @default(PENDING)
  paymentMode     PaymentMode?
  isConfirmed     Boolean @default(false)
  isCancelled     Boolean @default(false)
  cancellationReason String?
  confirmedAt     DateTime?
  cancelledAt     DateTime?
  
  // Special Requests
  specialRequests String?
  
  // Relations
  lineItems       HallLineItem[]
  payments        HallPayment[]
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("hall_bookings")
}

// Hall Quotation Model
model HallQuotation {
  id              String   @id @default(cuid()) @map("_id")
  hallId          String
  hall            Hall     @relation(fields: [hallId], references: [id])
  
  // Customer Info
  customerId      String
  customerName    String
  customerEmail   String
  customerPhone   String
  
  // Event Details
  eventName       String
  eventType       EventType
  eventDate       DateTime
  startTime       String
  endTime         String
  guestCount      Int
  
  // Quotation Details
  quotationNumber String   @unique
  baseAmount      Float
  subtotal        Float
  taxAmount       Float
  totalAmount     Float
  validUntil      DateTime
  
  // Status
  status          QuotationStatus @default(DRAFT)
  isAccepted      Boolean @default(false)
  isExpired       Boolean @default(false)
  acceptedAt      DateTime?
  
  // Relations
  lineItems       HallLineItem[]
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("hall_quotations")
}

// Hall Line Item Model
model HallLineItem {
  id              String   @id @default(cuid()) @map("_id")
  hallId          String
  hall            Hall     @relation(fields: [hallId], references: [id])
  
  // Optional Relations
  bookingId       String?
  booking         HallBooking? @relation(fields: [bookingId], references: [id])
  quotationId     String?
  quotation       HallQuotation? @relation(fields: [quotationId], references: [id])
  
  // Item Details
  itemType        LineItemType
  itemName        String
  description     String?
  quantity        Int
  unitPrice       Float
  totalPrice      Float
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("hall_line_items")
}

// Hall Payment Model
model HallPayment {
  id              String   @id @default(cuid()) @map("_id")
  bookingId       String
  booking         HallBooking @relation(fields: [bookingId], references: [id])
  
  // Payment Details
  paymentNumber   String   @unique
  amount          Float
  paymentType     PaymentType
  paymentMode     PaymentMode
  paymentStatus   PaymentStatus @default(PENDING)
  
  // Transaction Details
  transactionId   String?
  reference       String?
  isRefunded      Boolean @default(false)
  refundAmount    Float?
  refundReason    String?
  processedAt     DateTime?
  refundedAt      DateTime?
  gatewayResponse Json?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("hall_payments")
}

// Hall Availability Model
model HallAvailability {
  id              String   @id @default(cuid()) @map("_id")
  hallId          String
  hall            Hall     @relation(fields: [hallId], references: [id])
  
  // Availability Details
  date            DateTime
  startTime       String
  endTime         String
  isAvailable     Boolean @default(true)
  reason          String?
  
  // Timestamps
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@map("hall_availability")
}

// Enums
enum EventType {
  WEDDING
  CORPORATE
  BIRTHDAY
  ANNIVERSARY
  CONFERENCE
  SEMINAR
  PARTY
  MEETING
  OTHER
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CHECKED_IN
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum QuotationStatus {
  DRAFT
  SENT
  ACCEPTED
  REJECTED
  EXPIRED
}

enum LineItemType {
  HALL_RENTAL
  CHAIR
  TABLE
  DECORATION
  LIGHTING
  AV_EQUIPMENT
  CATERING
  SECURITY
  GENERATOR
  CLEANING
  PARKING
  OTHER
}

enum PaymentType {
  DEPOSIT
  ADVANCE
  FULL_PAYMENT
  REFUND
}

enum PaymentMode {
  CASH
  CARD
  UPI
  NET_BANKING
  WALLET
  CHEQUE
  BANK_TRANSFER
}